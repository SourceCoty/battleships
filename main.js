/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ai: () => (/* binding */ ai),\n/* harmony export */   gameBoard: () => (/* binding */ gameBoard),\n/* harmony export */   hit: () => (/* binding */ hit),\n/* harmony export */   over: () => (/* binding */ over),\n/* harmony export */   player: () => (/* binding */ player),\n/* harmony export */   ship: () => (/* binding */ ship)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! . */ \"./src/index.js\");\n// const resetButton = document.getElementById(\"reset\")\n// resetButton.addEventListener(\"click\", (e) => {\n//     e.target.onclick = location.reload()\n// })\n\nlet over = false\nlet hit = false\n\n;\nconst ship = (type, length) => {\n    let health = length\n    let hits = 0\n    let sunk = false\n    let name = type\n    let ship = true\n\n    let getHealth = () => health\n\n    const hit = () => {\n        hits++\n        health--\n        if (health <= 0) {\n            health = 0\n        }\n\n        return health \n    }\n\n    const isSunk = () => {\n        if (health === 0) {\n            sunk = true;\n            return sunk\n        } else {\n            return false\n        }\n    }\n\n    return {getHealth, hit, isSunk, name, length, ship}\n}\n\n\nconst gameBoard = (playerOne, playerTwo, boardName, ships) => {\n    let grid = []\n    let proceedToBoard = null\n    let proceedToPlace = null\n    const flotilla = [...ships]\n    const player = playerOne.name\n    const opponent = playerTwo.name\n    const board = boardName\n    \n    function createGrid () {\n        for (let i = 0; i < 100; i++) {\n            grid.push(i)\n        }\n    }\n\n    function placeShip (ship) {\n        let coordinate = generateCoordinate()\n\n        checkCoordinate(coordinate, ship)\n        limitBoard(coordinate, ship)\n\n        if (proceedToBoard === true && proceedToPlace === true) {\n            addToGameBoard(coordinate, ship)\n        } else {\n            placeShip(ship)\n        }\n    }\n\n    function generateCoordinate () {\n        return Math.floor(Math.random() * 100)\n    }\n\n    function checkCoordinate(coordinate, ship) {\n        let length = ship.length\n        let validCoordinates = []\n        \n        for (let i = 0; i < length; i++) {\n            if (typeof grid[coordinate + i] === \"number\") {\n                validCoordinates.push(coordinate)\n            }\n        } \n\n        if (validCoordinates.length === ship.length) {\n            proceedToBoard = true\n        } else {\n            proceedToBoard = false\n        }\n    }\n\n    function limitBoard(coordinate, ship) {\n        let length = ship.length\n        \n        if (coordinate < 10) {\n            if (coordinate + length > 10) {\n                proceedToPlace = false\n            } else {\n                proceedToPlace = true\n            }\n        } else if (coordinate > 9 && coordinate < 20) {\n            if (coordinate + length > 20) {\n                proceedToPlace = false\n            } else {\n                proceedToPlace = true\n            }\n        } else if (coordinate > 19 && coordinate < 30) {\n            if (coordinate + length > 30) {\n                proceedToPlace = false\n            } else {\n                proceedToPlace = true\n            }\n        } else if (coordinate > 29 && coordinate < 40) {\n            if (coordinate + length > 40) {\n                proceedToPlace = false\n            } else {\n                return proceedToPlace = true\n            }\n        } else if (coordinate > 39 && coordinate < 50) {\n            if (coordinate + length > 50) {\n                proceedToPlace = false\n            } else {\n                proceedToPlace = true\n            }\n        } else if (coordinate > 49 && coordinate < 60) {\n            if (coordinate + length > 60) {\n                proceedToPlace = false\n            } else {\n                proceedToPlace = true\n            }\n        } else if (coordinate > 59 && coordinate < 70) {\n            if (coordinate + length > 70) {\n                proceedToPlace = false\n            } else {\n                proceedToPlace = true\n            }\n        } else if (coordinate > 69 && coordinate < 80) {\n            if (coordinate + length > 80) {\n                proceedToPlace = false\n            } else {\n                proceedToPlace = true\n            }\n        } else if (coordinate > 79 && coordinate < 90) {\n            if (coordinate + length > 89) {\n                proceedToPlace = false\n            } else {\n                proceedToPlace = true\n            }\n        } else if (coordinate > 89 && coordinate < 100) {\n            if (coordinate + length > 100) {\n                proceedToPlace = false\n            } else {\n                proceedToPlace = true\n            }\n        } \n        return\n    }\n\n    function addToGameBoard(coordinate, ship) {\n        let progress = coordinate\n        let length = ship.length\n        let storage = []\n        \n        for (let i = 0; i < length; i++) {\n           if (typeof grid[progress] !== \"number\") {\n            (0,___WEBPACK_IMPORTED_MODULE_0__.generateMessage)(\"This coordinate has already been taken.\")\n            break \n           }\n           storage.push(grid[progress])\n           progress++\n        }\n        \n        if (storage.length == ship.length) {\n            for (let i = 0; i < length; i++) {\n                let storedValue = storage[i]\n                grid[storedValue] = ship\n            }\n        }\n    }\n\n    function resetGameBoard() {\n        grid = []\n        createGrid()\n    }\n\n    function receiveAttack(coordinate) {\n        if (grid[coordinate].ship === true) {\n            grid[coordinate].hit()\n            ;(0,___WEBPACK_IMPORTED_MODULE_0__.generateMessage)(`direct hit to ${player}'s ${grid[coordinate].name}`)\n            if (player !== \"computer\") {\n                hit = true\n            }\n        } else {\n            (0,___WEBPACK_IMPORTED_MODULE_0__.generateMessage)(`${opponent} missed at coordinate #${grid[coordinate]}`)\n            grid[coordinate] = \"miss\"\n            if (player !== \"computer\") {\n                hit = false\n            }\n        }\n    }\n\n    function reportGameStatus () {\n        const content = document.querySelector(\".content\")\n        let tally = []\n\n        for (let i = 0; i < flotilla.length; i++) {\n            if (flotilla[i].isSunk() === true) {\n                tally.push(\"sunk\")\n            }\n        }\n\n        if (tally.length === flotilla.length) {\n            if (player === \"computer\") {\n                (0,___WEBPACK_IMPORTED_MODULE_0__.generateMessage)(`${player}'s fleet has been sunk`)\n                content.setAttribute('id', 'off')\n                over = true\n            } else {\n                (0,___WEBPACK_IMPORTED_MODULE_0__.generateMessage)(`your fleet has been sunk`)\n                content.setAttribute('id', 'off')\n                over = true\n            }\n        } else {\n           return\n        }\n    }\n\n    createGrid()\n\n    return {grid, createGrid, placeShip, receiveAttack, reportGameStatus, resetGameBoard, flotilla, player, board}\n}\n\nconst player = () => {\n    const name = \"player one\"\n\n    return {name}\n} \n\n\nconst ai = () => {\n    const name = \"computer\"\n    const pastMoves = []\n    let move = null\n\n    function processAdjacentMove() {\n        move = pastMoves[pastMoves.length -1] + 1\n        \n        if (move > 99) {\n            move = null\n            hit = false\n        }\n\n        for (let i = 0; i < pastMoves.length; i++) {\n            if (pastMoves[i] === move) {\n                move = null\n                hit = false\n            } \n        }\n\n        if (move !== null) {\n            storeMove()\n        }\n        \n        return move\n    }\n\n    function processMove() {\n        genMove()\n        return move\n    }\n\n    function genMove() {\n            let number = Math.floor(Math.random() * 100)\n            move = number\n            checkMove()\n        }\n    \n     \n     function checkMove() {\n        if (move > 99) {\n            move = null\n            hit = false\n        }\n\n        for (let i = 0; i < pastMoves.length; i++) {\n            if (pastMoves[i] === move) {\n                move = null\n                hit = false\n            } \n        }\n\n        if (move !== null) {\n            storeMove()\n        }\n     }\n    \n     function storeMove() {\n        pastMoves.push(move)\n     }\n\n     return {processMove, processAdjacentMove, name}\n}\n\n// function createBoardOne (board) {\n//     const id = board.board.toString()\n//     const newBoard = document.getElementById(id)\n//     let counter = 0\n//     for (let i = 0; i<board.grid.length; i++) {\n//         const div = document.createElement('div')\n//         div.setAttribute(\"id\", counter)\n//         div.className = \"coordinate-one\"\n\n//         if (board.grid[i].ship === true) {\n//             div.className = \"coordinate-one ship\"\n//         }\n\n//         newBoard.appendChild(div)\n//         counter++\n//     }\n// }\n\n// function createBoardTwo (board) {\n//     const id = board.board.toString()\n//     const newBoard = document.getElementById(id)\n//     let counter = 0\n//     for (let i = 0; i<board.grid.length; i++) {\n//         const div = document.createElement('a')\n//         div.setAttribute('href', '#')\n//         div.setAttribute(\"id\", counter)\n//         div.className = \"coordinate-two\"\n\n//         if (board.grid[i].ship === true) {\n//             div.className = \"coordinate-two ship\"\n//         }\n        \n//         newBoard.appendChild(div)\n//         counter++\n//     }\n// }\n\n// function attackOne(coordinate, board) {\n//     board.receiveAttack(coordinate)\n    \n//     let parent = document.getElementById(\"board-one\")\n//     let div = parent.childNodes[coordinate]\n//     if (board.grid[coordinate].ship === true) {\n//        div.className = \"coordinate-one hit\"\n//     } else if (board.grid[coordinate] === \"miss\") {\n//         div.className = \"coordinate-one miss\"\n//         div.textContent = \".\"\n//     }\n//     board.reportGameStatus()\n// }\n\n// function attackTwo(coordinate, board) {\n//     board.receiveAttack(coordinate)\n    \n//     let parent = document.getElementById(\"board-two\")\n//     let div = parent.childNodes[coordinate]\n//     if (board.grid[coordinate].ship === true) {\n//        div.className = \"coordinate-two hit\"\n//     } else if (board.grid[coordinate] === \"miss\") {\n//         div.className = \"coordinate-two miss\"\n//         div.textContent = \".\"\n//     }\n//     board.reportGameStatus()\n// }\n\n// const gameController = (player, board) => {\n    \n//     if (hit === true) {\n//         let move = player.processAdjacentMove()\n//         if (move !== null) {\n//             attackOne(move, board)\n//         }\n//     } else {\n//         let move = player.processMove()\n\n//         if (move !== null) {\n//             attackOne(move, board)\n//         } else {\n//             gameController(player, board)\n//         }\n//     }\n// }\n\n// function generateMessage(string) {\n//     let messageBoard = document.getElementById(\"message-board\")\n//     messageBoard.innerText = string\n// }\n\n// const generateGameBoard = () => {\n\n//     const carrierOne = ship(\"carrier\", 5)\n//     const battleshipOne = ship(\"battleship\", 4)\n//     const cruiserOne = ship(\"cruiser\", 3)\n//     const submarineOne = ship(\"sub\", 2)\n//     const destroyerOne = ship(\"destroyer\", 2)\n\n//     const carrierTwo = ship(\"carrier\", 5)\n//     const battleshipTwo = ship(\"battleship\", 4)\n//     const cruiserTwo = ship(\"cruiser\", 3)\n//     const submarineTwo = ship(\"sub\", 2)\n//     const destroyerTwo = ship(\"destroyer\", 2)\n\n//     const playerOne = player()\n//     const playerTwo = ai()\n\n//     const fleetOne = [carrierOne, battleshipOne, cruiserOne, submarineOne, destroyerOne]\n//     const fleetTwo = [carrierTwo, battleshipTwo, cruiserTwo, submarineTwo, destroyerTwo]\n\n//     const boardOne = gameBoard(playerOne, playerTwo, \"board-one\", fleetOne)\n//     const boardTwo = gameBoard(playerTwo, playerOne, \"board-two\", fleetTwo)\n\n//     boardOne.placeShip(carrierOne)\n//     boardOne.placeShip(battleshipOne)\n//     boardOne.placeShip(cruiserOne)\n//     boardOne.placeShip(destroyerOne)\n//     boardOne.placeShip(submarineOne)\n\n//     boardTwo.placeShip(carrierTwo)\n//     boardTwo.placeShip(battleshipTwo)\n//     boardTwo.placeShip(cruiserTwo)\n//     boardTwo.placeShip(destroyerTwo)\n//     boardTwo.placeShip(submarineTwo)\n\n//     createBoardOne(boardOne)\n//     createBoardTwo(boardTwo)\n//     generateMessage(\"pick your first move\")\n\n//     const content = document.querySelector(\".content\")\n//     const tile = document.querySelectorAll(\".coordinate-two\")\n\n//     tile.forEach((el) => {\n//         el.addEventListener('click', function(e) {\n//             if(over === true) {\n//                 content.setAttribute(\"id\", \"off\");\n//             } else {\n//                 const coordinate = el.id\n//                 e.target.onclick = attackTwo(coordinate, boardTwo)\n//                 content.setAttribute(\"id\", \"off\")\n            \n\n//                 if(over === false) {\n//                     setTimeout(() => {\n//                         gameController(playerTwo, boardOne)\n//                         content.setAttribute(\"id\", \"on\")\n//                     }, 500)\n//                 }\n//             }\n//         })\n//     })\n// }\n// generateGameBoard()\n\n\n\n//# sourceURL=webpack://battleship-dev/./src/app.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   attackOne: () => (/* binding */ attackOne),\n/* harmony export */   attackTwo: () => (/* binding */ attackTwo),\n/* harmony export */   createBoardOne: () => (/* binding */ createBoardOne),\n/* harmony export */   createBoardTwo: () => (/* binding */ createBoardTwo),\n/* harmony export */   gameController: () => (/* binding */ gameController),\n/* harmony export */   generateGameBoard: () => (/* binding */ generateGameBoard),\n/* harmony export */   generateMessage: () => (/* binding */ generateMessage)\n/* harmony export */ });\n/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app */ \"./src/app.js\");\n\n\nconst resetButton = document.getElementById(\"reset\")\nresetButton.addEventListener(\"click\", (e) => {\n    e.target.onclick = location.reload()\n})\n\n\nfunction createBoardOne (board) {\n    const id = board.board.toString()\n    const newBoard = document.getElementById(id)\n    let counter = 0\n    for (let i = 0; i<board.grid.length; i++) {\n        const div = document.createElement('div')\n        div.setAttribute(\"id\", counter)\n        div.className = \"coordinate-one\"\n\n        if (board.grid[i].ship === true) {\n            div.className = \"coordinate-one ship\"\n        }\n\n        newBoard.appendChild(div)\n        counter++\n    }\n}\n\nfunction createBoardTwo (board) {\n    const id = board.board.toString()\n    const newBoard = document.getElementById(id)\n    let counter = 0\n    for (let i = 0; i<board.grid.length; i++) {\n        const div = document.createElement('a')\n        div.setAttribute('href', '#')\n        div.setAttribute(\"id\", counter)\n        div.className = \"coordinate-two\"\n\n        if (board.grid[i].ship === true) {\n            div.className = \"coordinate-two ship\"\n        }\n        \n        newBoard.appendChild(div)\n        counter++\n    }\n}\n\nfunction generateMessage(string) {\n    let messageBoard = document.getElementById(\"message-board\")\n    messageBoard.innerText = string\n}\n\nconst gameController = (player, board) => {\n    \n    if (_app__WEBPACK_IMPORTED_MODULE_0__.hit === true) {\n        let move = player.processAdjacentMove()\n        if (move !== null) {\n            attackOne(move, board)\n        }\n    } else {\n        let move = player.processMove()\n\n        if (move !== null) {\n            attackOne(move, board)\n        } else {\n            gameController(player, board)\n        }\n    }\n}\n\nfunction attackOne(coordinate, board) {\n    board.receiveAttack(coordinate)\n    \n    let parent = document.getElementById(\"board-one\")\n    let div = parent.childNodes[coordinate]\n    if (board.grid[coordinate].ship === true) {\n       div.className = \"coordinate-one hit\"\n    } else if (board.grid[coordinate] === \"miss\") {\n        div.className = \"coordinate-one miss\"\n        div.textContent = \".\"\n    }\n    board.reportGameStatus()\n}\n\nfunction attackTwo(coordinate, board) {\n    board.receiveAttack(coordinate)\n    \n    let parent = document.getElementById(\"board-two\")\n    let div = parent.childNodes[coordinate]\n    if (board.grid[coordinate].ship === true) {\n       div.className = \"coordinate-two hit\"\n    } else if (board.grid[coordinate] === \"miss\") {\n        div.className = \"coordinate-two miss\"\n        div.textContent = \".\"\n    }\n    board.reportGameStatus()\n}\n\nconst generateGameBoard = () => {\n\n    const carrierOne = (0,_app__WEBPACK_IMPORTED_MODULE_0__.ship)(\"carrier\", 5)\n    const battleshipOne = (0,_app__WEBPACK_IMPORTED_MODULE_0__.ship)(\"battleship\", 4)\n    const cruiserOne = (0,_app__WEBPACK_IMPORTED_MODULE_0__.ship)(\"cruiser\", 3)\n    const submarineOne = (0,_app__WEBPACK_IMPORTED_MODULE_0__.ship)(\"sub\", 2)\n    const destroyerOne = (0,_app__WEBPACK_IMPORTED_MODULE_0__.ship)(\"destroyer\", 2)\n\n    const carrierTwo = (0,_app__WEBPACK_IMPORTED_MODULE_0__.ship)(\"carrier\", 5)\n    const battleshipTwo = (0,_app__WEBPACK_IMPORTED_MODULE_0__.ship)(\"battleship\", 4)\n    const cruiserTwo = (0,_app__WEBPACK_IMPORTED_MODULE_0__.ship)(\"cruiser\", 3)\n    const submarineTwo = (0,_app__WEBPACK_IMPORTED_MODULE_0__.ship)(\"sub\", 2)\n    const destroyerTwo = (0,_app__WEBPACK_IMPORTED_MODULE_0__.ship)(\"destroyer\", 2)\n\n    const playerOne = (0,_app__WEBPACK_IMPORTED_MODULE_0__.player)()\n    const playerTwo = (0,_app__WEBPACK_IMPORTED_MODULE_0__.ai)()\n\n    const fleetOne = [carrierOne, battleshipOne, cruiserOne, submarineOne, destroyerOne]\n    const fleetTwo = [carrierTwo, battleshipTwo, cruiserTwo, submarineTwo, destroyerTwo]\n\n    const boardOne = (0,_app__WEBPACK_IMPORTED_MODULE_0__.gameBoard)(playerOne, playerTwo, \"board-one\", fleetOne)\n    const boardTwo = (0,_app__WEBPACK_IMPORTED_MODULE_0__.gameBoard)(playerTwo, playerOne, \"board-two\", fleetTwo)\n\n    boardOne.placeShip(carrierOne)\n    boardOne.placeShip(battleshipOne)\n    boardOne.placeShip(cruiserOne)\n    boardOne.placeShip(destroyerOne)\n    boardOne.placeShip(submarineOne)\n\n    boardTwo.placeShip(carrierTwo)\n    boardTwo.placeShip(battleshipTwo)\n    boardTwo.placeShip(cruiserTwo)\n    boardTwo.placeShip(destroyerTwo)\n    boardTwo.placeShip(submarineTwo)\n\n    createBoardOne(boardOne)\n    createBoardTwo(boardTwo)\n    generateMessage(\"pick your first move\")\n\n    const content = document.querySelector(\".content\")\n    const tile = document.querySelectorAll(\".coordinate-two\")\n\n    tile.forEach((el) => {\n        el.addEventListener('click', function(e) {\n            if(_app__WEBPACK_IMPORTED_MODULE_0__.over === true) {\n                content.setAttribute(\"id\", \"off\");\n            } else {\n                const coordinate = el.id\n                e.target.onclick = attackTwo(coordinate, boardTwo)\n                content.setAttribute(\"id\", \"off\")\n            \n\n                if(_app__WEBPACK_IMPORTED_MODULE_0__.over === false) {\n                    setTimeout(() => {\n                        gameController(playerTwo, boardOne)\n                        content.setAttribute(\"id\", \"on\")\n                    }, 500)\n                }\n            }\n        })\n    })\n}\n generateGameBoard()\n\n \n\n//# sourceURL=webpack://battleship-dev/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;